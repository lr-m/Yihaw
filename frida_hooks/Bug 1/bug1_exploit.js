Java.perform(function () {
    // This is to skip an annoying popup
    let ChoiceModeActivity = Java.use("com.ants360.yicamera.activity.camera.connection.ChoiceModeActivity");
    ChoiceModeActivity["checkLocation"].implementation = function () {
        console.log(`ChoiceModeActivity.checkLocation is called`);
        this.locationFlag = true;
    };

    // This is to skip an annoying popup
    let ConfigWifiActivity = Java.use("com.ants360.yicamera.activity.camera.connection.ConfigWifiActivity");
    ConfigWifiActivity["checkLocation"].implementation = function () {
        console.log(`ConfigWifiActivity.checkLocation is called`);
        this.locationFlag = true;
    };

    // this is to set the data that is being passed into the pcm function up (otherwise size issues)
    let PcmUtil = Java.use("com.ants360.yicamera.util.PcmUtil");
    PcmUtil["genPcmData"].implementation = function (str, str2, i, bVar) {
        console.log(`PcmUtil.genPcmData is called: str=${str}, str2=${str2}, i=${i}, bVar=${bVar}`);

        // Define your byte string
        let bigboyBytes = [0x62, 0x0A,
            0x41, 0x61, 0x30, 0x41,
            0x61, 0x31, 0x41, 0x61,
            0x32, 0x41, 0x61, 0x33,
            0x41, 0x61, 0x34, 0x41,
            0x61, 0x35, 0x41, 0x61,
            0x36, 0x41, 0x61, 0x37,
            0x41, 0x61, 0x38, 0x41,
            0x61, 0x39, 0x41, 0x62,
            0x30, 0x41, 0x62, 0x31,
            0x41, 0x62, 0x32, 0x41,
            0x62, 0x33, 0x41, 0x62,
            0x34, 0x41, 0x62, 0x35,
            0x41, 0x62, 0x36, 0x41,
            0x62, 0x37, 0x41, 0x62,
            0x38, 0x41, 0x62, 0x39,
            0x41, 0x63, 0x30, 0x41,
            0x63, 0x31, 0x41, 0x63,
            0x32, 0x41, 0x63, 0x33,
            0x41, 0x63, 0x34, 0x41,
            0x63, 0x35, 0x41, 0x63,
            0x36, 0x41, 0x63, 0x37,
            0x41, 0x63, 0x38, 0x41,
            0x63, 0x39, 0x41, 0x64,
            0x30, 0x41, 0x64, 0x31,
            0x41, 0x64, 0x32,
            0x41, 0x64, 0x33, 0x41, // <- r11
            0x41, 0x41, 0x41, 0x41, // <- pc
            0x35, 0x41, 0x64, 0x36, // <- r3
            0x41, 0x64, 0x37, 0x41, // <- sp
            0x64, 0x38, 0x41, 0x64, // <- lr
            0x39, 0x41, 0x65, 0x30, // <- pc
            0x0A, 0x70];

        // Convert the byte array to a Uint8Array
        let byteStringArray = new Uint8Array(bigboyBytes);

        str2 = '';
        for (let i = 0; i < byteStringArray.length; i++) {
            str2 += String.fromCharCode(byteStringArray[i]);
        }

        // Set the byte string
        i = bigboyBytes.length;

        console.log(`PcmUtil.genPcmData is called: str=${str}, str2=${str2}, i=${i}, bVar=${bVar}`);

        // Call the original function with modified arguments
        this["genPcmData"](str, str2, i, bVar);
    };
});

// We have to do this as at the higher level the string gets UTF-8 encoding which messes up anything > 0x7f
const ghidraImageBase = 0x100000;
const moduleName = "libpcmjni.so";
const moduleBaseAddress = Module.findBaseAddress(moduleName);
const functionRealAddress = moduleBaseAddress.add(0x103c4c - ghidraImageBase);
Interceptor.attach(functionRealAddress, {
    onEnter: function (args) {
        args[0].writeByteArray([
            0x62, 0xa, 0x41, 0x41, 
            0x41, 0xf8, 0x1, 0xbd, 
            0xe8, 0x20, 0x10, 0xa0, 
            0xe3, 0xfc, 0x80, 0xa0, 
            0xe3, 0x1, 0x70, 0xa0, 
            0xe1, 0x1, 0x40, 0xd6, 
            0xe4, 0x8, 0x40, 0x24, 
            0xe0, 0x1, 0x40, 0x46, 
            0xe5, 0x1, 0x70, 0x57, 
            0xe2, 0x1, 0x20, 0x47, 
            0xe2, 0xf9, 0xff, 0xff, 
            0x5a, 0x5, 0x50, 0xa0, 
            0xe3, 0x20, 0x40, 0x2d, 
            0xe9, 0x1, 0x40, 0xbd, 
            0xe8, 0x1, 0xda, 0x8d, 
            0xe2, 0x33, 0xff, 0x2f, 
            0xe1, 0xec, 0xec, 0x63, 
            0x19, 0xfd, 0xfc, 0x5c, 
            0x1f, 0xcd, 0x3, 0xd3, 
            0x1d, 0xf4, 0xec, 0x63, 
            0x19, 0xec, 0xfc, 0x5c, 
            0x1f, 0xcd, 0x3, 0xd3, 
            0x1d, 0x14, 0x43, 0xff, 
            0xfc, 0x88, 0x70, 0x59, 
            0x4a, 0x41, 0x41, 0x41, 
            0x41, 0x41, 0x41, 0x41, 
            0x41, 0x90, 0xa7, 0x8f, 
            0xb3, 0x74, 0x8c, 0xa5, 
            0xb6, 0xef, 0xbe, 0xad, 
            0xde, 0xef, 0xbe, 0xad, 
            0xde, 0xcc, 0xa7, 0x8f, 
            0xb3, 0xa, 0x70, 0x0
        ]);
    
    
        console.log(hexdump(args[0]));
    },
    onLeave: function(args) {
        console.log("done");
    }
});
