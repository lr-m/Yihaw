Java.perform(function () {
    // This is to skip an annoying popup
    let ChoiceModeActivity = Java.use("com.ants360.yicamera.activity.camera.connection.ChoiceModeActivity");
    ChoiceModeActivity["checkLocation"].implementation = function () {
        console.log(`ChoiceModeActivity.checkLocation is called`);
        this.locationFlag = true;
    };

    // This is to skip an annoying popup
    let ConfigWifiActivity = Java.use("com.ants360.yicamera.activity.camera.connection.ConfigWifiActivity");
    ConfigWifiActivity["checkLocation"].implementation = function () {
        console.log(`ConfigWifiActivity.checkLocation is called`);
        this.locationFlag = true;
    };

    // this is to set the data that is being passed into the pcm function up (otherwise size issues)
    let PcmUtil = Java.use("com.ants360.yicamera.util.PcmUtil");
    PcmUtil["genPcmData"].implementation = function (str, str2, i, bVar) {
        console.log(`PcmUtil.genPcmData is called: str=${str}, str2=${str2}, i=${i}, bVar=${bVar}`);

        // Define your byte string
        let payload = [0x62, 0x0A,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,	
            0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41,
            0x41, 0x41, 0x41,
            0x41, 0x41, 0x41, 0x41, // <- r11
            0x41, 0x41, 0x41, 0x41, // <- pc
            0x41, 0x41, 0x41, 0x41, // <- r3
            0x41, 0x41, 0x41, 0x41, // <- sp
            0x41, 0x41, 0x41, 0x41, // <- lr
            0x41, 0x41, 0x41, 0x41, // <- pc
            0x0A, 0x70];

        // Convert the byte array to a Uint8Array
        let byteStringArray = new Uint8Array(payload);

        str2 = '';
        for (let i = 0; i < byteStringArray.length; i++) {
            str2 += String.fromCharCode(byteStringArray[i]);
        }

        // Set the byte string
        i = payload.length;

        console.log(`PcmUtil.genPcmData is called: str=${str}, str2=${str2}, i=${i}, bVar=${bVar}`);

        // Call the original function with modified arguments
        this["genPcmData"](str, str2, i, bVar);
    };
});

// We have to do this as at the higher level the string gets UTF-8 encoding which messes up anything > 0x7f
const ghidraImageBase = 0x100000;
const moduleName = "libpcmjni.so";
const moduleBaseAddress = Module.findBaseAddress(moduleName);
const functionRealAddress = moduleBaseAddress.add(0x103c4c - ghidraImageBase);
Interceptor.attach(functionRealAddress, {
    onEnter: function (args) {
        args[0].writeByteArray([
			0x62, 0xa, 0x41, 0x41,
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,				
			0x41, 0x41, 0x41, 0x41,				
			0x41, 0x41, 0x41, 0x41,			
			0x41, 0x41, 0x41, 0x41,				
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,			
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,			
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,				
			0x41, 0x41, 0x41, 0x41,			
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,			
			0x41, 0x41, 0x41, 0x41,			
			0x41, 0x41, 0x41, 0x41,				
			0x41, 0x41, 0x41, 0x41,		
			0x41, 0x41, 0x41, 0x41,				
			0x41, 0x41, 0x41, 0x41,					
			0x41, 0x41, 0x41, 0x41,			
			0x41, 0xa, 0x70, 0x0
		]);

        console.log(hexdump(args[0]));
    },
    onLeave: function(args) {
        console.log("done");
    }
});
